package com.welshare.service;

import java.util.List;
import java.util.Map;

import com.welshare.model.Login;
import com.welshare.model.SocialNetworkScore;
import com.welshare.model.User;
import com.welshare.model.enums.Country;
import com.welshare.service.exception.UserException;
import com.welshare.service.model.UserDetails;

/**
 * Handling user operations
 *
 * @author Bozhidar Bozhanov
 *
 */
public interface UserService extends BaseService {

    /**
     * Registers a new user
     *
     * @param user
     * @return user
     */
    User register(User user) throws UserException;

    /**
     * Registers a new user based on external provider (OpenID, Fb/Tw connect)
     *
     * @param user
     * @return the registered user
     * @throws UserException
     */
    User externalRegister(User user) throws UserException;

    /**
     * Logs a user in
     *
     * @param username
     * @param password
     * @param remember
     *
     * @return the logged user
     * @throws UserException if any problem occurs while logging in
     */
    Login login(String username, String password, boolean remember, String ip) throws UserException;

    /**
     * Logs-in a user by providing an externalAuthId
     * (openId, facebook id, twitter id, ..)
     *
     * @param externalAuthId
     * @return the logged user, or null if no user is found
     */
    Login externalLogin(String externalAuthId, String up);

    /**
     * First salts and then hashes the provided password (the salt is generated by bcrypt)
     *
     * @param password
     * @return the salted and hashed password
     */
    String saltAndHashPassword(String password);

    /**
     * Change the password of the specified user and saves it
     *
     * @param loggedUserHolder
     * @param newPassword
     */
    void changePassword(String userId, String newPassword);

    /**
     * Activates user
     *
     * @param code
     * @return user
     * @throws UserException
     */
    User activateUserWithCode(String code) throws UserException;

    /**
     * Checks whether a username is taken
     *
     * @param username
     * @return true if the username is free, false otherwise
     */
    boolean checkUsername(String username);

    /**
     * Checks whether a email is taken
     *
     * @param email
     * @return true if the email is free, false otherwise
     */
    boolean checkEmail(String email);

    /**
     * Creates an initial administrator user
     */
    void createInitialUser();

    User getUserFromAuthToken(String authToken, String series);

    /**
     * Gets the details for a user with a given username
     *
     * @param username
     * @return the details
     */
    UserDetails getUserDetails(String username);

    /**
     * Finds a list of users for the given keywords
     * @param keywords
     * @return list of user details
     */
    List<UserDetails> findUsers(String keywords);

    /**
     * Suggests list of users based on the start of the name/email
     * @param keywords
     *
     * @return list of details
     */
    List<UserDetails> suggestUsers(String start);

    /**
     * Suggest users from the friends of the given user
     * @param start
     * @param currentUser
     * @return list of user details
     */
    List<UserDetails> suggestUsers(String start, User currentUser);

    /**
     * Registers a user email in the waiting list for registrations also
     * generates an invitation code which is later used. This method is used
     * both in the initial phase where there is a waiting list, and may also be
     * used later when users send invitations to their friends.
     *
     * @return true if the registration is successful, false if the email has
     *         already been registered
     */
    boolean registerWaitingUser(String email);

    /**
     * Gets a list of top users by score
     *
     * @param page paging parameter
     * @return list
     */
    List<UserDetails> getTopUsers(int page);

    User createUserForInvitationCode(String code);

    void resetPassword(String username) throws UserException;

    /**
     * Performs a provisional login.
     * Resets the auth token that is used for cookie authentication
     * @param authToken
     * @param series
     */
    Login rememberMeLogin(String authToken, String series, String ip);

    /**
     * Obtains a user with the given username and password reset token
     * @param username
     * @param token
     * @return user, or null if no user exists with this combination
     */
    User getUserFromPasswordResetToken(String username, String token);

    /**
     * Gets a list of top users by city
     * @param city
     * @param page
     * @return list
     */
    List<UserDetails> getTopUsers(String city, int page);

    /**
     * Gets a list of top users by country
     * @param country
     * @param page
     * @return list
     */
    List<UserDetails> getTopUsers(Country country, int page);

    /**
     * Gets a list of usernames in the external services that this user is connected to
     * @param user
     * @return list of usernames
     */
    List<String> getExternalUsernames(User user);

    UserDetails getByPublicId(String id, String currentUserId);

    User getByUsername(String username);

    Map<String, SocialNetworkScore> getReputationScores(String userId);

    /**
     * Method for notifying platform admin users when their attention is required
     * @param the message string to be used as title
     */
    void notifyAdminUsers(String message);

    /**
     * Deletes the user permanently
     * @param userId
     */
    void deleteUser(String userId);

    void clearDisconnectReasons(String userId);
}
